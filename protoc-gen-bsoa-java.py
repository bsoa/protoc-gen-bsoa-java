#!/usr/bin/env python
import sys
import itertools

from google.protobuf.descriptor_pb2 import DescriptorProto, EnumDescriptorProto, ServiceDescriptorProto, \
    MethodDescriptorProto
from google.protobuf.compiler import plugin_pb2 as plugin


def generate_code(request, response):

    for proto_file in request.proto_file:

        # print >> log, ">>>options", type(proto_file.options)
        # print >> log, ">>>options", proto_file.options
        java_package = proto_file.options.java_package
        java_outer_classname = proto_file.options.java_outer_classname
        java_multiple_files = proto_file.options.java_multiple_files

        if java_package is None or java_package == "":
            java_package = proto_file.package
        if java_outer_classname is None or java_outer_classname == "":
            java_outer_classname = proto_file.name[0:proto_file.name.rindex(".")].capitalize()
        if java_multiple_files is None:
            java_multiple_files = False
        # print >> log, ">>>java_package ", type(java_package), java_package
        # print >> log, ">>>java_outer_classname ",  type(java_outer_classname), java_outer_classname
        # print >> log, ">>>java_multiple_files ",  type(java_multiple_files), java_multiple_files

        # Parse request
        for item, package in traverse(proto_file):
            if isinstance(item, ServiceDescriptorProto):
                # print >> log, "=========Found Service==========", item

                java_file_name, java_file_content \
                    = build_service(proto_file, proto_file.package, java_package, java_outer_classname, java_multiple_files, item)

                # print >> log, "==start gen file", java_file_name
                service_file = response.file.add()
                service_file.name = java_file_name
                service_file.content = java_file_content

            # elif isinstance(item, DescriptorProto):
            #     print >> log, "=========desc==========", item
            #     data.update({
            #         'type': 'Message',
            #         'properties': [{'name': f.name, 'type': int(f.type)}
            #                        for f in item.field]
            #     })
            #
            # elif isinstance(item, EnumDescriptorProto):
            #     print >> log, "=========enum==========", item
            #     data.update({
            #         'type': 'Enum',
            #         'values': [{'name': v.name, 'value': v.number}
            #                    for v in item.value]
            #     })


def build_service(proto_file, proto_package, java_package, java_outer_classname, java_multiple_files, sdp_item):
    """
        proto_file:
        proto_package : str
        java_package: str
        java_outer_classname: str
        java_multiple_files: boolean
        sdp_item: ServiceDescriptorProtoItem
    """
    content_lines = []
    imports = []
    body = []

    content_lines.append("// Generated by the protocol buffer compiler.  DO NOT EDIT!")
    content_lines.append("// source: " + proto_file.name)
    content_lines.append("")
    content_lines.append("package " + java_package + ";")
    content_lines.append("")

    body.append("public interface " + sdp_item.name + " {")
    for rpc in sdp_item.method:
        if isinstance(rpc, MethodDescriptorProto):
            # print >> log, "====Found method", rpc
            # print >> log, ""

            ridx = rpc.input_type.rindex('.')
            sidx = rpc.output_type.rindex('.')
            request_package = rpc.input_type[1:ridx]
            response_package = rpc.output_type[1:sidx]
            request_class_name = rpc.input_type[ridx+1:]
            response_class_name = rpc.output_type[ridx+1:]

            # print >> log, "=========request==========", rpc.input_type
            # print >> log, "=========rresponse==========", rpc.output_type
            # print >> log, "=========request_package==========", request_package
            # print >> log, "=========response_package==========", response_package
            # print >> log, "=========request_class_name==========", request_class_name
            # print >> log, "=========response_class_name==========", response_class_name
            # print >> log, "=========proto_package==========", proto_package
            # print >> log, "=========java_package==========", java_package

            if request_package == proto_package:
                request_package = ""
            else:
                request_package = java_package + "."

            if response_package == proto_package:
                response_package = ""
            else:
                response_package = java_package + "."


            if(java_multiple_files) :
                request = request_package + request_class_name
                response = response_package + response_class_name
                body.append("    public " + response + " " + rpc.name + "(" + request + " req);")
            else:
                request = request_package + java_outer_classname + "." + request_class_name
                response = response_package + java_outer_classname + "." + response_class_name
                body.append("    public " + response + " " + rpc.name + "(" + request + " req);")


    body.append("}")
    content_lines.extend(imports)
    content_lines.extend(body)

    java_file_name = java_package.replace(".", "/") + "/" + sdp_item.name + ".java"

    java_file_content = ""
    for s in content_lines:
        java_file_content += s + "\n"
        # print >> log, s

    return java_file_name, java_file_content


def traverse(proto_file):
    def _traverse(package, items):
        for item in items:
            # yield item, package

            if isinstance(item, ServiceDescriptorProto):
                # print >> log, "=======find ServiceDescriptorProto=======", item
                yield item, package
            # if isinstance(item, DescriptorProto):
            #     for enum in item.enum_type:
            #         yield enum, package
            #
            #     for nested in item.nested_type:
            #         nested_package = package + item.name
            #
            #         for nested_item in _traverse(nested, nested_package):
            #             yield nested_item, nested_package

    return itertools.chain(
        _traverse(proto_file.package, proto_file.service),
        # _traverse(proto_file.package, proto_file.enum_type),
        # _traverse(proto_file.package, proto_file.message_type),
    )

if __name__ == '__main__':

    # log = open("../build/pb.log", 'w+')

    # Read request message from stdin
    data = sys.stdin.read()

    # print >> log, "=======data=======", data
    # Parse request
    request = plugin.CodeGeneratorRequest()
    request.ParseFromString(data)

    # print >> log, "=======request=======", request
    # Create response
    response = plugin.CodeGeneratorResponse()

    # Generate code
    generate_code(request, response)

    # print >> log,  "=======response=======", response

    # Serialise response message
    output = response.SerializeToString()

    # print >> log,  "=======output=======", output

    # Write to stdout
    sys.stdout.write(output)
